<?php 
# Code generated by sdkgen
# Generated on 2020-10-07 16:06:52.401010677 +0000 UTC using container gcr.io/repcore-prod/sdkgen:latest
# DO NOT EDIT!

namespace Vendasta\GSuite\V1\internal;

use Vendasta\Vax\GRPCClient;

class GSuitePartnerGRPCClient extends GRPCClient implements GSuitePartnerClientInterface
{
    private $client;

    /**
     * Constructor for GSuitePartnerGRPCClient
     * @param string $hostname hostname of the service to hit
     * @param string $scope
     * @param bool $secure
     * @param float $default_timeout time in milliseconds
     */
    public function __construct(string $hostname, string $scope, bool $secure = true, float $default_timeout = 10000)
    {
        parent::__construct($hostname, $scope, $secure, $default_timeout);
        $this->client = new \GSuite\V1\GSuitePartnerClient($hostname, $this->getClientOptions());
    }

    /**
     * Auth wrapper for \GSuite\V1\GSuitePartnerClient::GetDomainAvailability
     * @param \Gsuite\V1\GetDomainAvailabilityRequest $req proto request message
     * @param array $options optional options, possible keys:
     *              \Vendasta\Vax\RequestOptions::*
     * @return \Google\Protobuf\GPBEmpty proto response message
     * @throws \Vendasta\Vax\SDKException if this call encounters an error
     */
    public function GetDomainAvailability(\Gsuite\V1\GetDomainAvailabilityRequest $req, array $options = []): \Google\Protobuf\GPBEmpty
    {
        return $this->doRequest(
            array($this->client, 'GetDomainAvailability'),
            $req,
            $options
        );
    }
    
    /**
     * Auth wrapper for \GSuite\V1\GSuitePartnerClient::VerifyDomain
     * @param \Gsuite\V1\VerifyDomainRequest $req proto request message
     * @param array $options optional options, possible keys:
     *              \Vendasta\Vax\RequestOptions::*
     * @return \Gsuite\V1\VerifyDomainResponse proto response message
     * @throws \Vendasta\Vax\SDKException if this call encounters an error
     */
    public function VerifyDomain(\Gsuite\V1\VerifyDomainRequest $req, array $options = []): \Gsuite\V1\VerifyDomainResponse
    {
        return $this->doRequest(
            array($this->client, 'VerifyDomain'),
            $req,
            $options
        );
    }
    
    /**
     * Auth wrapper for \GSuite\V1\GSuitePartnerClient::GetDomainInformation
     * @param \Gsuite\V1\GetDomainInformationRequest $req proto request message
     * @param array $options optional options, possible keys:
     *              \Vendasta\Vax\RequestOptions::*
     * @return \Gsuite\V1\GetDomainInformationResponse proto response message
     * @throws \Vendasta\Vax\SDKException if this call encounters an error
     */
    public function GetDomainInformation(\Gsuite\V1\GetDomainInformationRequest $req, array $options = []): \Gsuite\V1\GetDomainInformationResponse
    {
        return $this->doRequest(
            array($this->client, 'GetDomainInformation'),
            $req,
            $options
        );
    }
    
    /**
     * Auth wrapper for \GSuite\V1\GSuitePartnerClient::ChangeSeats
     * @param \Gsuite\V1\ChangeSeatsRequest $req proto request message
     * @param array $options optional options, possible keys:
     *              \Vendasta\Vax\RequestOptions::*
     * @return \Gsuite\V1\ChangeSeatsResponse proto response message
     * @throws \Vendasta\Vax\SDKException if this call encounters an error
     */
    public function ChangeSeats(\Gsuite\V1\ChangeSeatsRequest $req, array $options = []): \Gsuite\V1\ChangeSeatsResponse
    {
        return $this->doRequest(
            array($this->client, 'ChangeSeats'),
            $req,
            $options
        );
    }
    
}
